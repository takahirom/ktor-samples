buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin-multiplatform'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

kotlin {
    targets {
        js('frontend') {
            browser()
        }
        jvm('backend') {
            compilations.main {
                tasks.getByName(processResourcesTaskName) {
                    dependsOn(frontendBrowserWebpack)
                    from(new File(frontendBrowserWebpack.entry.name, frontendBrowserWebpack.outputPath))
                }
            }
        }
    }
}

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
}

dependencies {
    backendMainImplementation "io.ktor:ktor-server-netty:$ktor_version"
    backendMainImplementation "io.ktor:ktor-html-builder:$ktor_version"
    backendMainImplementation "ch.qos.logback:logback-classic:$logback_version"
    backendMainImplementation "com.squareup.wire:wire-runtime:3.0.2"

    commonMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-common"
    commonTestImplementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
    commonTestImplementation "org.jetbrains.kotlin:kotlin-test-common"
    commonTestImplementation "com.squareup.wire:wire-runtime-multiplatform:3.0.2"

    frontendMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-js"
    frontendTestImplementation "org.jetbrains.kotlin:kotlin-test-js"
    frontendMainImplementation "com.squareup.wire:wire-runtime-js:3.0.2"

    backendMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    backendTestImplementation "org.jetbrains.kotlin:kotlin-test"
    backendTestImplementation "org.jetbrains.kotlin:kotlin-test-junit"
}

task run(type: JavaExec, dependsOn: [backendJar]) {
    main = "io.ktor.samples.fullstack.backend.BackendCodeKt"
    classpath(configurations.backendRuntimeClasspath, backendJar)
    args = []
}
